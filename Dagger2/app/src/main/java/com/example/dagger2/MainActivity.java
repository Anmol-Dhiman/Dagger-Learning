package com.example.dagger2;

import androidx.appcompat.app.AppCompatActivity;

import android.os.Bundle;

import javax.inject.Inject;

public class MainActivity extends AppCompatActivity {
//    private Car car;

    @Inject
    Car car;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

//       the DaggerCarComponent will be generated by dagger only after we build the project successfully
        CarComponent carComponent = DaggerCarComponent.create();

//        car = carComponent.getCar();

//        when we use a large number of car object then we can use the FieldInjection for injecting the dependecy
//        the benefit of this is that we have to use only 1 methos to inject the dependecy to all those objects


//        again the code will be generated by the Dagger2
        carComponent.inject(this);
        car.drive();


//        the code behind the DaggerCarComponent which is generated by the Dagger itself : -

    /*
    // Generated by Dagger (https://dagger.dev).
package com.example.dagger2;

import dagger.internal.DaggerGenerated;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerCarComponent {
  private DaggerCarComponent() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static CarComponent create() {
    return new Builder().build();
  }

  public static final class Builder {
    private Builder() {
    }

    public CarComponent build() {
      return new CarComponentImpl();
    }
  }

  private static final class CarComponentImpl implements CarComponent {
    private final CarComponentImpl carComponentImpl = this;

    private CarComponentImpl() {


    }

    @Override
    public Car getCar() {
      return new Car(new Enigine(), new Wheels());
    }
  }
}

     */


    }

}